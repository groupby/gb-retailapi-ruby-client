=begin
#GroupBy Retail

#GroupBy Retail API

The version of the OpenAPI document: 0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.0.1

=end

require 'cgi'

module GbRetailapiClient
  class ProductApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Provided product search functionality
    # Perform a product search against the GroupBy Retail Search API.
    # @param collection [String] Collection name
    # @param product_id [String] Product ID which need to be search
    # @param x_groupby_customer_id [String] Required. This parameter will extract from header X-Groupby-Customer-Id. May contain tenant name. Used to define a                           client by its name.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :variant_ids Not required. If the product has variant list and the request specifies the variantIds, requested variants will be the                           first in the response.
    # @return [ProductDto]
    def get_by_product_ids(collection, product_id, x_groupby_customer_id, opts = {})
      data, _status_code, _headers = get_by_product_ids_with_http_info(collection, product_id, x_groupby_customer_id, opts)
      data
    end

    # Provided product search functionality
    # Perform a product search against the GroupBy Retail Search API.
    # @param collection [String] Collection name
    # @param product_id [String] Product ID which need to be search
    # @param x_groupby_customer_id [String] Required. This parameter will extract from header X-Groupby-Customer-Id. May contain tenant name. Used to define a                           client by its name.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :variant_ids Not required. If the product has variant list and the request specifies the variantIds, requested variants will be the                           first in the response.
    # @return [Array<(ProductDto, Integer, Hash)>] ProductDto data, response status code and response headers
    def get_by_product_ids_with_http_info(collection, product_id, x_groupby_customer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductApi.get_by_product_ids ...'
      end
      # verify the required parameter 'collection' is set
      if @api_client.config.client_side_validation && collection.nil?
        fail ArgumentError, "Missing the required parameter 'collection' when calling ProductApi.get_by_product_ids"
      end
      # verify the required parameter 'product_id' is set
      if @api_client.config.client_side_validation && product_id.nil?
        fail ArgumentError, "Missing the required parameter 'product_id' when calling ProductApi.get_by_product_ids"
      end
      # verify the required parameter 'x_groupby_customer_id' is set
      if @api_client.config.client_side_validation && x_groupby_customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'x_groupby_customer_id' when calling ProductApi.get_by_product_ids"
      end
      # resource path
      local_var_path = '/api/search/product'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'collection'] = collection
      query_params[:'productId'] = product_id
      query_params[:'variantIds'] = @api_client.build_collection_param(opts[:'variant_ids'], :multi) if !opts[:'variant_ids'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-Groupby-Customer-Id'] = x_groupby_customer_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ProductDto'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['GroupByIncEmployee', 'ClientKey']

      new_options = opts.merge(
        :operation => :"ProductApi.get_by_product_ids",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#get_by_product_ids\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
