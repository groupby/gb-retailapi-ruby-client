=begin
#GroupBy Retail

#GroupBy Retail API

The version of the OpenAPI document: 0.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.0.1

=end

require 'cgi'

module GbRetailapiClient
  class RecommendationsAPIApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Provide Recommendations AI functionality.
    # Perform a recommendation request against the GroupBy Retail Recommendations API.
    # @param x_groupby_customer_id [String] Custom HTTP header which may contain tenant name. Used to define a client by its name.
    # @param recommendations_request [RecommendationsRequest] Request that should be populated to configure a recommendations API call made by the client.
    # @param [Hash] opts the optional parameters
    # @return [PredictResults]
    def predict(x_groupby_customer_id, recommendations_request, opts = {})
      data, _status_code, _headers = predict_with_http_info(x_groupby_customer_id, recommendations_request, opts)
      data
    end

    # Provide Recommendations AI functionality.
    # Perform a recommendation request against the GroupBy Retail Recommendations API.
    # @param x_groupby_customer_id [String] Custom HTTP header which may contain tenant name. Used to define a client by its name.
    # @param recommendations_request [RecommendationsRequest] Request that should be populated to configure a recommendations API call made by the client.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PredictResults, Integer, Hash)>] PredictResults data, response status code and response headers
    def predict_with_http_info(x_groupby_customer_id, recommendations_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RecommendationsAPIApi.predict ...'
      end
      # verify the required parameter 'x_groupby_customer_id' is set
      if @api_client.config.client_side_validation && x_groupby_customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'x_groupby_customer_id' when calling RecommendationsAPIApi.predict"
      end
      # verify the required parameter 'recommendations_request' is set
      if @api_client.config.client_side_validation && recommendations_request.nil?
        fail ArgumentError, "Missing the required parameter 'recommendations_request' when calling RecommendationsAPIApi.predict"
      end
      # resource path
      local_var_path = '/api/predict'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'X-Groupby-Customer-Id'] = x_groupby_customer_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(recommendations_request)

      # return_type
      return_type = opts[:debug_return_type] || 'PredictResults'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['GroupByIncEmployee', 'ClientKey']

      new_options = opts.merge(
        :operation => :"RecommendationsAPIApi.predict",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RecommendationsAPIApi#predict\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Provide Recommendations AI functionality.
    # Perform a recommendation request against the GroupBy Retail Recommendations API.
    # @param x_groupby_customer_id [String] Custom HTTP header which may contain tenant name. Used to define a client by its name.
    # @param recommendations_request [RecommendationsRequest] Request that should be populated to configure a recommendations API call made by the client.
    # @param [Hash] opts the optional parameters
    # @return [PredictResults]
    def predict_v2(x_groupby_customer_id, recommendations_request, opts = {})
      data, _status_code, _headers = predict_v2_with_http_info(x_groupby_customer_id, recommendations_request, opts)
      data
    end

    # Provide Recommendations AI functionality.
    # Perform a recommendation request against the GroupBy Retail Recommendations API.
    # @param x_groupby_customer_id [String] Custom HTTP header which may contain tenant name. Used to define a client by its name.
    # @param recommendations_request [RecommendationsRequest] Request that should be populated to configure a recommendations API call made by the client.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PredictResults, Integer, Hash)>] PredictResults data, response status code and response headers
    def predict_v2_with_http_info(x_groupby_customer_id, recommendations_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RecommendationsAPIApi.predict_v2 ...'
      end
      # verify the required parameter 'x_groupby_customer_id' is set
      if @api_client.config.client_side_validation && x_groupby_customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'x_groupby_customer_id' when calling RecommendationsAPIApi.predict_v2"
      end
      # verify the required parameter 'recommendations_request' is set
      if @api_client.config.client_side_validation && recommendations_request.nil?
        fail ArgumentError, "Missing the required parameter 'recommendations_request' when calling RecommendationsAPIApi.predict_v2"
      end
      # resource path
      local_var_path = '/api/recommendation'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'X-Groupby-Customer-Id'] = x_groupby_customer_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(recommendations_request)

      # return_type
      return_type = opts[:debug_return_type] || 'PredictResults'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['GroupByIncEmployee', 'ClientKey']

      new_options = opts.merge(
        :operation => :"RecommendationsAPIApi.predict_v2",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RecommendationsAPIApi#predict_v2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
