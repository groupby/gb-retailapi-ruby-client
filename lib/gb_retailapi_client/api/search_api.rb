=begin
#GroupBy Retail

#GroupBy Retail API

The version of the OpenAPI document: 0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.0.1

=end

require 'cgi'

module GbRetailapiClient
  class SearchApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Provided search functionality
    # Perform a facet search against the GroupBy Retail Search API.
    # @param x_groupby_customer_id [String] Custom HTTP header which may contain tenant name. Used to define a client by its name.
    # @param facet_search_request_dto [FacetSearchRequestDto] Request that should be populated to configure a search API call, made by the client on behalf of a shopper. Contains original request and information about facet for which extra keys requested.
    # @param [Hash] opts the optional parameters
    # @return [FacetSearchResponseDto]
    def facet_search(x_groupby_customer_id, facet_search_request_dto, opts = {})
      data, _status_code, _headers = facet_search_with_http_info(x_groupby_customer_id, facet_search_request_dto, opts)
      data
    end

    # Provided search functionality
    # Perform a facet search against the GroupBy Retail Search API.
    # @param x_groupby_customer_id [String] Custom HTTP header which may contain tenant name. Used to define a client by its name.
    # @param facet_search_request_dto [FacetSearchRequestDto] Request that should be populated to configure a search API call, made by the client on behalf of a shopper. Contains original request and information about facet for which extra keys requested.
    # @param [Hash] opts the optional parameters
    # @return [Array<(FacetSearchResponseDto, Integer, Hash)>] FacetSearchResponseDto data, response status code and response headers
    def facet_search_with_http_info(x_groupby_customer_id, facet_search_request_dto, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SearchApi.facet_search ...'
      end
      # verify the required parameter 'x_groupby_customer_id' is set
      if @api_client.config.client_side_validation && x_groupby_customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'x_groupby_customer_id' when calling SearchApi.facet_search"
      end
      # verify the required parameter 'facet_search_request_dto' is set
      if @api_client.config.client_side_validation && facet_search_request_dto.nil?
        fail ArgumentError, "Missing the required parameter 'facet_search_request_dto' when calling SearchApi.facet_search"
      end
      # resource path
      local_var_path = '/api/search/facet'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'X-Groupby-Customer-Id'] = x_groupby_customer_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(facet_search_request_dto)

      # return_type
      return_type = opts[:debug_return_type] || 'FacetSearchResponseDto'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['GroupByIncEmployee', 'ClientKey']

      new_options = opts.merge(
        :operation => :"SearchApi.facet_search",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SearchApi#facet_search\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Provided search functionality
    # Perform a search against the GroupBy Retail Search API.
    # @param x_groupby_customer_id [String] Custom HTTP header which may contain tenant name. Used to define a client by its name.
    # @param search_request_dto [SearchRequestDto] Request that should be populated to configure a search API call, made by the client on behalf of a shopper.
    # @param [Hash] opts the optional parameters
    # @return [SearchResponseDto]
    def search(x_groupby_customer_id, search_request_dto, opts = {})
      data, _status_code, _headers = search_with_http_info(x_groupby_customer_id, search_request_dto, opts)
      data
    end

    # Provided search functionality
    # Perform a search against the GroupBy Retail Search API.
    # @param x_groupby_customer_id [String] Custom HTTP header which may contain tenant name. Used to define a client by its name.
    # @param search_request_dto [SearchRequestDto] Request that should be populated to configure a search API call, made by the client on behalf of a shopper.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SearchResponseDto, Integer, Hash)>] SearchResponseDto data, response status code and response headers
    def search_with_http_info(x_groupby_customer_id, search_request_dto, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SearchApi.search ...'
      end
      # verify the required parameter 'x_groupby_customer_id' is set
      if @api_client.config.client_side_validation && x_groupby_customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'x_groupby_customer_id' when calling SearchApi.search"
      end
      # verify the required parameter 'search_request_dto' is set
      if @api_client.config.client_side_validation && search_request_dto.nil?
        fail ArgumentError, "Missing the required parameter 'search_request_dto' when calling SearchApi.search"
      end
      # resource path
      local_var_path = '/api/search'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'X-Groupby-Customer-Id'] = x_groupby_customer_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(search_request_dto)

      # return_type
      return_type = opts[:debug_return_type] || 'SearchResponseDto'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['GroupByIncEmployee', 'ClientKey']

      new_options = opts.merge(
        :operation => :"SearchApi.search",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SearchApi#search\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
