=begin
#GroupBy Retail

#GroupBy Retail API

The version of the OpenAPI document: 0.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.0.1

=end

require 'date'
require 'time'

module GbRetailapiClient
  # Product representation.
  class ProductDto
    # Relative path to product in Google Retail system.
    attr_accessor :name

    # Product id in Google Retail system.
    attr_accessor :id

    # Product type. Possible values: PRIMARY, VARIANT. If the product has variant list and the request specifies the variantIds, requested variants will be the first in the response.
    attr_accessor :type

    # Product ID that is primary in relation to the current one
    attr_accessor :primary_product_id

    # The of the collection members when product type is COLLECTION
    attr_accessor :collection_member_ids

    # Global Trade Item Number can be used by a company to uniquely identify all of its trade items.GTIN defines trade items as products or services that are priced, ordered or invoiced at any point in the supply chain.
    attr_accessor :gtin

    # Product categories (array).
    attr_accessor :categories

    # Product title.
    attr_accessor :title

    # Product brands.
    attr_accessor :brands

    # Product description.
    attr_accessor :description

    # Language of the title/description and other string attributes. Use language tags defined by [BCP 47][https://www.rfc-editor.org/rfc/bcp/bcp47.txt]. For product search this field is in use. It defaults to 'en-US' if unset.
    attr_accessor :language_code

    # Highly encouraged. Extra product attributes to be included. For example, for products, this could include the store name, vendor, style, color, etc. These are very strong signals for recommendation model, thus we highly recommend providing the attributes here. Features that can take on one of a limited number of possible values. Two types of features can be set are: Textual features. some examples would be the brand/maker of a product, or country of a customer. Numerical features. Some examples would be the height/weight of a product, or age of a customer.  Max entries count: 200. Length limit of 128 characters.
    attr_accessor :attributes

    # Product tags (array).
    attr_accessor :tags

    attr_accessor :price_info

    attr_accessor :rating

    attr_accessor :available_time

    # The online availability of the product. Default to IN_STOCK
    attr_accessor :availability

    # The available quantity of the item.
    attr_accessor :available_quantity

    # Fulfillment information, such as the store IDs for in-store pickup or region IDs for different shipping methods.
    attr_accessor :fulfillment_infos

    # Link to the appropriate product.
    attr_accessor :uri

    # Product Image.
    attr_accessor :images

    attr_accessor :audience

    attr_accessor :color_info

    # Product sizes (array).
    attr_accessor :sizes

    # The material of the product. For example, 'leather', 'wooden'. A maximum of 20 values are allowed. Length limit of 128 characters
    attr_accessor :materials

    # The pattern or graphic print of the product. For example, 'striped', 'polka dot', 'paisley'. A maximum of 20 values are allowed per product. Length limit of 128 characters.
    attr_accessor :patterns

    # The condition of the product. Strongly encouraged to use the standardvalues: 'new', 'refurbished', 'used'. A maximum of 5 values are allowed per product. Length limit of 128 characters.
    attr_accessor :conditions

    attr_accessor :publish_time

    attr_accessor :retrievable_fields

    # The promotions applied to the product. A maximum of 10 values are allowed per product.
    attr_accessor :promotions

    # If the product has variant list and the request specifies the variantIds, requested variants will be the first in the response.
    attr_accessor :variants

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'name' => :'name',
        :'id' => :'id',
        :'type' => :'type',
        :'primary_product_id' => :'primaryProductId',
        :'collection_member_ids' => :'collectionMemberIds',
        :'gtin' => :'gtin',
        :'categories' => :'categories',
        :'title' => :'title',
        :'brands' => :'brands',
        :'description' => :'description',
        :'language_code' => :'languageCode',
        :'attributes' => :'attributes',
        :'tags' => :'tags',
        :'price_info' => :'priceInfo',
        :'rating' => :'rating',
        :'available_time' => :'availableTime',
        :'availability' => :'availability',
        :'available_quantity' => :'availableQuantity',
        :'fulfillment_infos' => :'fulfillmentInfos',
        :'uri' => :'uri',
        :'images' => :'images',
        :'audience' => :'audience',
        :'color_info' => :'colorInfo',
        :'sizes' => :'sizes',
        :'materials' => :'materials',
        :'patterns' => :'patterns',
        :'conditions' => :'conditions',
        :'publish_time' => :'publishTime',
        :'retrievable_fields' => :'retrievableFields',
        :'promotions' => :'promotions',
        :'variants' => :'variants'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'name' => :'String',
        :'id' => :'String',
        :'type' => :'String',
        :'primary_product_id' => :'String',
        :'collection_member_ids' => :'Array<String>',
        :'gtin' => :'String',
        :'categories' => :'Array<String>',
        :'title' => :'String',
        :'brands' => :'Array<String>',
        :'description' => :'String',
        :'language_code' => :'String',
        :'attributes' => :'Hash<String, ProductCustomAttribute>',
        :'tags' => :'Array<String>',
        :'price_info' => :'ProductDtoPriceInfo',
        :'rating' => :'ProductDtoRating',
        :'available_time' => :'ProductDtoAvailableTime',
        :'availability' => :'String',
        :'available_quantity' => :'Integer',
        :'fulfillment_infos' => :'Array<FulfillmentInfo>',
        :'uri' => :'String',
        :'images' => :'Array<Image>',
        :'audience' => :'ProductDtoAudience',
        :'color_info' => :'ProductDtoColorInfo',
        :'sizes' => :'Array<String>',
        :'materials' => :'Array<String>',
        :'patterns' => :'Array<String>',
        :'conditions' => :'Array<String>',
        :'publish_time' => :'ProductDtoPublishTime',
        :'retrievable_fields' => :'ProductDtoRetrievableFields',
        :'promotions' => :'Array<Promotion>',
        :'variants' => :'Array<ProductDto>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `GbRetailapiClient::ProductDto` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `GbRetailapiClient::ProductDto`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'primary_product_id')
        self.primary_product_id = attributes[:'primary_product_id']
      end

      if attributes.key?(:'collection_member_ids')
        if (value = attributes[:'collection_member_ids']).is_a?(Array)
          self.collection_member_ids = value
        end
      end

      if attributes.key?(:'gtin')
        self.gtin = attributes[:'gtin']
      end

      if attributes.key?(:'categories')
        if (value = attributes[:'categories']).is_a?(Array)
          self.categories = value
        end
      end

      if attributes.key?(:'title')
        self.title = attributes[:'title']
      end

      if attributes.key?(:'brands')
        if (value = attributes[:'brands']).is_a?(Array)
          self.brands = value
        end
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'language_code')
        self.language_code = attributes[:'language_code']
      end

      if attributes.key?(:'attributes')
        if (value = attributes[:'attributes']).is_a?(Hash)
          self.attributes = value
        end
      end

      if attributes.key?(:'tags')
        if (value = attributes[:'tags']).is_a?(Array)
          self.tags = value
        end
      end

      if attributes.key?(:'price_info')
        self.price_info = attributes[:'price_info']
      end

      if attributes.key?(:'rating')
        self.rating = attributes[:'rating']
      end

      if attributes.key?(:'available_time')
        self.available_time = attributes[:'available_time']
      end

      if attributes.key?(:'availability')
        self.availability = attributes[:'availability']
      end

      if attributes.key?(:'available_quantity')
        self.available_quantity = attributes[:'available_quantity']
      end

      if attributes.key?(:'fulfillment_infos')
        if (value = attributes[:'fulfillment_infos']).is_a?(Array)
          self.fulfillment_infos = value
        end
      end

      if attributes.key?(:'uri')
        self.uri = attributes[:'uri']
      end

      if attributes.key?(:'images')
        if (value = attributes[:'images']).is_a?(Array)
          self.images = value
        end
      end

      if attributes.key?(:'audience')
        self.audience = attributes[:'audience']
      end

      if attributes.key?(:'color_info')
        self.color_info = attributes[:'color_info']
      end

      if attributes.key?(:'sizes')
        if (value = attributes[:'sizes']).is_a?(Array)
          self.sizes = value
        end
      end

      if attributes.key?(:'materials')
        if (value = attributes[:'materials']).is_a?(Array)
          self.materials = value
        end
      end

      if attributes.key?(:'patterns')
        if (value = attributes[:'patterns']).is_a?(Array)
          self.patterns = value
        end
      end

      if attributes.key?(:'conditions')
        if (value = attributes[:'conditions']).is_a?(Array)
          self.conditions = value
        end
      end

      if attributes.key?(:'publish_time')
        self.publish_time = attributes[:'publish_time']
      end

      if attributes.key?(:'retrievable_fields')
        self.retrievable_fields = attributes[:'retrievable_fields']
      end

      if attributes.key?(:'promotions')
        if (value = attributes[:'promotions']).is_a?(Array)
          self.promotions = value
        end
      end

      if attributes.key?(:'variants')
        if (value = attributes[:'variants']).is_a?(Array)
          self.variants = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          name == o.name &&
          id == o.id &&
          type == o.type &&
          primary_product_id == o.primary_product_id &&
          collection_member_ids == o.collection_member_ids &&
          gtin == o.gtin &&
          categories == o.categories &&
          title == o.title &&
          brands == o.brands &&
          description == o.description &&
          language_code == o.language_code &&
          attributes == o.attributes &&
          tags == o.tags &&
          price_info == o.price_info &&
          rating == o.rating &&
          available_time == o.available_time &&
          availability == o.availability &&
          available_quantity == o.available_quantity &&
          fulfillment_infos == o.fulfillment_infos &&
          uri == o.uri &&
          images == o.images &&
          audience == o.audience &&
          color_info == o.color_info &&
          sizes == o.sizes &&
          materials == o.materials &&
          patterns == o.patterns &&
          conditions == o.conditions &&
          publish_time == o.publish_time &&
          retrievable_fields == o.retrievable_fields &&
          promotions == o.promotions &&
          variants == o.variants
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [name, id, type, primary_product_id, collection_member_ids, gtin, categories, title, brands, description, language_code, attributes, tags, price_info, rating, available_time, availability, available_quantity, fulfillment_infos, uri, images, audience, color_info, sizes, materials, patterns, conditions, publish_time, retrievable_fields, promotions, variants].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = GbRetailapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
