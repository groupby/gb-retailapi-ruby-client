=begin
#GroupBy Retail

#GroupBy Retail API

The version of the OpenAPI document: 0.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.0.1

=end

require 'date'
require 'time'

module GbRetailapiClient
  # Response of calling the search API, including various elements of the original request context, matching records and general metadata relating to the results.
  class SearchResponseDto
    # Unique identifier for the search.
    attr_accessor :id

    # Area Id the search was performed in.
    attr_accessor :area

    # Original search query.
    attr_accessor :query

    # Search query after any changes/corrections are done by the engine.
    attr_accessor :corrected_query

    # Name of the biasing profile which was used to bias products in the search results.
    attr_accessor :biasing_profile

    # Id of the biasing profile which was used to bias products in the search results.
    attr_accessor :biasing_profile_applied_id

    attr_accessor :filter

    attr_accessor :original_request

    # The list of records that match the search.
    attr_accessor :records

    # The total number of products that match the search. If all products were filtered out on S4R site equals to 0.
    attr_accessor :total_record_count

    attr_accessor :metadata

    attr_accessor :page_info

    attr_accessor :available_navigation

    attr_accessor :selected_navigation

    # URL to which the merchandiser should redirect the shopper to.
    attr_accessor :redirect

    attr_accessor :experiments

    attr_accessor :template

    # True if the search yielded no results, otherwise false.
    attr_accessor :empty

    attr_accessor :site_params

    attr_accessor :debug

    # Warning messages containing information about invalid products, etc.
    attr_accessor :warnings

    # When a shopper uses an ambiguous or a multi-word search phrase, they can get an empty response. After turning on include expanded results, Retail Search analyzes the request and returns the expanded list of products based on the parsed search query. For example, if you search \"Google Pixel 5\" without query expansion, you might only get \"google_pixel_5\" in the result. With query expansion, you might get \"google_pixel_4a_with_5g\", \"google_pixel_4a\" and \"google_pixel_5_case\" as well.The default value is configured in the tenant settings or true if there is no such setting
    attr_accessor :include_expanded_results

    # Maximum of facet values that should be returned for this facet. If not specified, defaults to 20. The maximum allowed value is 300. Values above 300 will be coerced to 300.  If this field is negative, an INVALID_ARGUMENT is returned.  This limit (300) is configured on Google side, but Google have an ability to change it for specific project. 
    attr_accessor :facet_limit

    attr_accessor :redirect_metadata

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'area' => :'area',
        :'query' => :'query',
        :'corrected_query' => :'correctedQuery',
        :'biasing_profile' => :'biasingProfile',
        :'biasing_profile_applied_id' => :'biasingProfileAppliedId',
        :'filter' => :'filter',
        :'original_request' => :'originalRequest',
        :'records' => :'records',
        :'total_record_count' => :'totalRecordCount',
        :'metadata' => :'metadata',
        :'page_info' => :'pageInfo',
        :'available_navigation' => :'availableNavigation',
        :'selected_navigation' => :'selectedNavigation',
        :'redirect' => :'redirect',
        :'experiments' => :'experiments',
        :'template' => :'template',
        :'empty' => :'empty',
        :'site_params' => :'siteParams',
        :'debug' => :'debug',
        :'warnings' => :'warnings',
        :'include_expanded_results' => :'includeExpandedResults',
        :'facet_limit' => :'facetLimit',
        :'redirect_metadata' => :'redirectMetadata'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'String',
        :'area' => :'String',
        :'query' => :'String',
        :'corrected_query' => :'String',
        :'biasing_profile' => :'String',
        :'biasing_profile_applied_id' => :'Integer',
        :'filter' => :'String',
        :'original_request' => :'SearchRequestDto',
        :'records' => :'Array<RecordDto>',
        :'total_record_count' => :'Integer',
        :'metadata' => :'SearchMetadataDto',
        :'page_info' => :'PageInfoDto',
        :'available_navigation' => :'Array<NavigationDto>',
        :'selected_navigation' => :'Array<NavigationDto>',
        :'redirect' => :'String',
        :'experiments' => :'Array<Experiment>',
        :'template' => :'TemplateDto',
        :'empty' => :'Boolean',
        :'site_params' => :'Array<Metadata>',
        :'debug' => :'DebugDto',
        :'warnings' => :'Array<String>',
        :'include_expanded_results' => :'Boolean',
        :'facet_limit' => :'Integer',
        :'redirect_metadata' => :'Array<Metadata>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `GbRetailapiClient::SearchResponseDto` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `GbRetailapiClient::SearchResponseDto`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'area')
        self.area = attributes[:'area']
      end

      if attributes.key?(:'query')
        self.query = attributes[:'query']
      end

      if attributes.key?(:'corrected_query')
        self.corrected_query = attributes[:'corrected_query']
      end

      if attributes.key?(:'biasing_profile')
        self.biasing_profile = attributes[:'biasing_profile']
      end

      if attributes.key?(:'biasing_profile_applied_id')
        self.biasing_profile_applied_id = attributes[:'biasing_profile_applied_id']
      end

      if attributes.key?(:'filter')
        self.filter = attributes[:'filter']
      else
        self.filter = nil
      end

      if attributes.key?(:'original_request')
        self.original_request = attributes[:'original_request']
      else
        self.original_request = nil
      end

      if attributes.key?(:'records')
        if (value = attributes[:'records']).is_a?(Array)
          self.records = value
        end
      end

      if attributes.key?(:'total_record_count')
        self.total_record_count = attributes[:'total_record_count']
      end

      if attributes.key?(:'metadata')
        self.metadata = attributes[:'metadata']
      else
        self.metadata = nil
      end

      if attributes.key?(:'page_info')
        self.page_info = attributes[:'page_info']
      else
        self.page_info = nil
      end

      if attributes.key?(:'available_navigation')
        if (value = attributes[:'available_navigation']).is_a?(Array)
          self.available_navigation = value
        end
      else
        self.available_navigation = nil
      end

      if attributes.key?(:'selected_navigation')
        if (value = attributes[:'selected_navigation']).is_a?(Array)
          self.selected_navigation = value
        end
      else
        self.selected_navigation = nil
      end

      if attributes.key?(:'redirect')
        self.redirect = attributes[:'redirect']
      end

      if attributes.key?(:'experiments')
        if (value = attributes[:'experiments']).is_a?(Array)
          self.experiments = value
        end
      else
        self.experiments = nil
      end

      if attributes.key?(:'template')
        self.template = attributes[:'template']
      else
        self.template = nil
      end

      if attributes.key?(:'empty')
        self.empty = attributes[:'empty']
      end

      if attributes.key?(:'site_params')
        if (value = attributes[:'site_params']).is_a?(Array)
          self.site_params = value
        end
      else
        self.site_params = nil
      end

      if attributes.key?(:'debug')
        self.debug = attributes[:'debug']
      else
        self.debug = nil
      end

      if attributes.key?(:'warnings')
        if (value = attributes[:'warnings']).is_a?(Array)
          self.warnings = value
        end
      end

      if attributes.key?(:'include_expanded_results')
        self.include_expanded_results = attributes[:'include_expanded_results']
      end

      if attributes.key?(:'facet_limit')
        self.facet_limit = attributes[:'facet_limit']
      end

      if attributes.key?(:'redirect_metadata')
        if (value = attributes[:'redirect_metadata']).is_a?(Array)
          self.redirect_metadata = value
        end
      else
        self.redirect_metadata = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @filter.nil?
        invalid_properties.push('invalid value for "filter", filter cannot be nil.')
      end

      if @original_request.nil?
        invalid_properties.push('invalid value for "original_request", original_request cannot be nil.')
      end

      if @metadata.nil?
        invalid_properties.push('invalid value for "metadata", metadata cannot be nil.')
      end

      if @page_info.nil?
        invalid_properties.push('invalid value for "page_info", page_info cannot be nil.')
      end

      if @available_navigation.nil?
        invalid_properties.push('invalid value for "available_navigation", available_navigation cannot be nil.')
      end

      if @selected_navigation.nil?
        invalid_properties.push('invalid value for "selected_navigation", selected_navigation cannot be nil.')
      end

      if @experiments.nil?
        invalid_properties.push('invalid value for "experiments", experiments cannot be nil.')
      end

      if @template.nil?
        invalid_properties.push('invalid value for "template", template cannot be nil.')
      end

      if @site_params.nil?
        invalid_properties.push('invalid value for "site_params", site_params cannot be nil.')
      end

      if @debug.nil?
        invalid_properties.push('invalid value for "debug", debug cannot be nil.')
      end

      if @redirect_metadata.nil?
        invalid_properties.push('invalid value for "redirect_metadata", redirect_metadata cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @filter.nil?
      return false if @original_request.nil?
      return false if @metadata.nil?
      return false if @page_info.nil?
      return false if @available_navigation.nil?
      return false if @selected_navigation.nil?
      return false if @experiments.nil?
      return false if @template.nil?
      return false if @site_params.nil?
      return false if @debug.nil?
      return false if @redirect_metadata.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          area == o.area &&
          query == o.query &&
          corrected_query == o.corrected_query &&
          biasing_profile == o.biasing_profile &&
          biasing_profile_applied_id == o.biasing_profile_applied_id &&
          filter == o.filter &&
          original_request == o.original_request &&
          records == o.records &&
          total_record_count == o.total_record_count &&
          metadata == o.metadata &&
          page_info == o.page_info &&
          available_navigation == o.available_navigation &&
          selected_navigation == o.selected_navigation &&
          redirect == o.redirect &&
          experiments == o.experiments &&
          template == o.template &&
          empty == o.empty &&
          site_params == o.site_params &&
          debug == o.debug &&
          warnings == o.warnings &&
          include_expanded_results == o.include_expanded_results &&
          facet_limit == o.facet_limit &&
          redirect_metadata == o.redirect_metadata
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, area, query, corrected_query, biasing_profile, biasing_profile_applied_id, filter, original_request, records, total_record_count, metadata, page_info, available_navigation, selected_navigation, redirect, experiments, template, empty, site_params, debug, warnings, include_expanded_results, facet_limit, redirect_metadata].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = GbRetailapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
