=begin
#GroupBy Retail

#GroupBy Retail API

The version of the OpenAPI document: 0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.0.1

=end

require 'date'
require 'time'

module GbRetailapiClient
  # Request that should be populated to configure a search API call, made by the client on behalf of a shopper.
  class SearchRequestDto
    # Base textual search query.
    attr_accessor :query

    # Area name the search is being performed in.
    attr_accessor :area

    # Name of collection in project configuration setting which is mapped to the google retail backend.
    attr_accessor :collection

    # Unique identifier identifying the shopper. Will be autogenerated if not provided.
    attr_accessor :visitor_id

    attr_accessor :refinements

    # The number of products to be returned on each page.
    attr_accessor :page_size

    # Where in the list of products to begin the page.
    attr_accessor :skip

    # Name of a biasing profile which should be applied to the search. Takes priority over area default.
    attr_accessor :biasing_profile

    attr_accessor :biasing

    attr_accessor :custom_url_params

    attr_accessor :sorts

    # Set of navigation fields to include in the search result. Cannot be set if 'excludedNavigations' is set.
    attr_accessor :included_navigations

    # Set of navigation fields to exclude in the search result. Cannot be set if 'includedNavigations' is set.
    attr_accessor :excluded_navigations

    # Set the specifications of dynamically generated facets.
    attr_accessor :dynamic_facet

    # Set the variant rollup keys.
    attr_accessor :variant_rollup_keys

    # Set of the prefilter specifications value.
    attr_accessor :pre_filter

    # Name of site filter. If not specified, the specified area's default site will be applied if configured in Command Center. To not use default specify empty value i.e.\"\".  If the site doesn't exist then the search will execute without the site filter and a warning will be provided.
    attr_accessor :site

    # List with fields which should be included in metadata object associated with each record in response.
    attr_accessor :response_mask

    # The categories associated with a category page. Required for category navigation queries to achieve good search quality. To represent full path of category, use '>' sign to separate different hierarchies. If '>' is part of the category name, please replace it with other character(s).Max item length = 1.
    attr_accessor :page_categories

    attr_accessor :spell_correction_mode

    # When a shopper uses an ambiguous or a multi-word search phrase, they can get an empty response. After turning on include expanded results, Retail Search analyzes the request and returns the expanded list of products based on the parsed search query. For example, if you search \"Google Pixel 5\" without query expansion, you might only get \"google_pixel_5\" in the result. With query expansion, you might get \"google_pixel_4a_with_5g\", \"google_pixel_4a\" and \"google_pixel_5_case\" as well.The default value is configured in the tenant settings or true if there is no such setting
    attr_accessor :include_expanded_results

    # This configuration depends on include expanded results settings. If this field is set to true,unexpanded products are always at the top of the search results, followed  by the expanded results. Default value: true
    attr_accessor :pin_unexpanded_results

    # Enable additional debug info in response.  Note: attaching debug info significantly affects performance. Is not supposed to be used for large requests.  
    attr_accessor :debug

    # Maximum of facet values that should be returned for this facet. If not specified, defaults to 20. The maximum allowed value is 300. Values above 300 will be coerced to 300.  If this field is negative, an INVALID_ARGUMENT is returned.  This limit (300) is configured on Google side, but Google have an ability to change it for specific project. 
    attr_accessor :facet_limit

    # Highly recommended for logged-in users. Unique identifier for logged-in user, such as a user name. Don't set for anonymous users.  Don't set the field to the same fixed ID for different users. This mixes the event history of those users together, which results in degraded model quality.  The field must be a UTF-8 encoded string with a length limit of 128 characters. 
    attr_accessor :login_id

    attr_accessor :overwrites

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'query' => :'query',
        :'area' => :'area',
        :'collection' => :'collection',
        :'visitor_id' => :'visitorId',
        :'refinements' => :'refinements',
        :'page_size' => :'pageSize',
        :'skip' => :'skip',
        :'biasing_profile' => :'biasingProfile',
        :'biasing' => :'biasing',
        :'custom_url_params' => :'customUrlParams',
        :'sorts' => :'sorts',
        :'included_navigations' => :'includedNavigations',
        :'excluded_navigations' => :'excludedNavigations',
        :'dynamic_facet' => :'dynamicFacet',
        :'variant_rollup_keys' => :'variantRollupKeys',
        :'pre_filter' => :'preFilter',
        :'site' => :'site',
        :'response_mask' => :'responseMask',
        :'page_categories' => :'pageCategories',
        :'spell_correction_mode' => :'spellCorrectionMode',
        :'include_expanded_results' => :'includeExpandedResults',
        :'pin_unexpanded_results' => :'pinUnexpandedResults',
        :'debug' => :'debug',
        :'facet_limit' => :'facetLimit',
        :'login_id' => :'loginId',
        :'overwrites' => :'overwrites'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'query' => :'String',
        :'area' => :'String',
        :'collection' => :'String',
        :'visitor_id' => :'String',
        :'refinements' => :'Array<SelectedRefinementDto>',
        :'page_size' => :'Integer',
        :'skip' => :'Integer',
        :'biasing_profile' => :'String',
        :'biasing' => :'BiasingProfileDto',
        :'custom_url_params' => :'Array<CustomParameterDto>',
        :'sorts' => :'Array<SortDto>',
        :'included_navigations' => :'Array<String>',
        :'excluded_navigations' => :'Array<String>',
        :'dynamic_facet' => :'Boolean',
        :'variant_rollup_keys' => :'Array<String>',
        :'pre_filter' => :'String',
        :'site' => :'String',
        :'response_mask' => :'Array<String>',
        :'page_categories' => :'Array<String>',
        :'spell_correction_mode' => :'SpellCorrectionMode',
        :'include_expanded_results' => :'Boolean',
        :'pin_unexpanded_results' => :'Boolean',
        :'debug' => :'Boolean',
        :'facet_limit' => :'Integer',
        :'login_id' => :'String',
        :'overwrites' => :'SearchRequestDtoOverwrites'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'query',
        :'area',
        :'collection',
        :'visitor_id',
        :'page_size',
        :'skip',
        :'biasing_profile',
        :'biasing',
        :'included_navigations',
        :'excluded_navigations',
        :'dynamic_facet',
        :'variant_rollup_keys',
        :'pre_filter',
        :'site',
        :'response_mask',
        :'page_categories',
        :'spell_correction_mode',
        :'include_expanded_results',
        :'pin_unexpanded_results',
        :'debug',
        :'facet_limit',
        :'login_id',
        :'overwrites'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `GbRetailapiClient::SearchRequestDto` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `GbRetailapiClient::SearchRequestDto`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'query')
        self.query = attributes[:'query']
      end

      if attributes.key?(:'area')
        self.area = attributes[:'area']
      else
        self.area = 'Production'
      end

      if attributes.key?(:'collection')
        self.collection = attributes[:'collection']
      else
        self.collection = 'default'
      end

      if attributes.key?(:'visitor_id')
        self.visitor_id = attributes[:'visitor_id']
      end

      if attributes.key?(:'refinements')
        if (value = attributes[:'refinements']).is_a?(Array)
          self.refinements = value
        end
      else
        self.refinements = nil
      end

      if attributes.key?(:'page_size')
        self.page_size = attributes[:'page_size']
      else
        self.page_size = 10
      end

      if attributes.key?(:'skip')
        self.skip = attributes[:'skip']
      else
        self.skip = 0
      end

      if attributes.key?(:'biasing_profile')
        self.biasing_profile = attributes[:'biasing_profile']
      end

      if attributes.key?(:'biasing')
        self.biasing = attributes[:'biasing']
      else
        self.biasing = nil
      end

      if attributes.key?(:'custom_url_params')
        if (value = attributes[:'custom_url_params']).is_a?(Array)
          self.custom_url_params = value
        end
      else
        self.custom_url_params = nil
      end

      if attributes.key?(:'sorts')
        if (value = attributes[:'sorts']).is_a?(Array)
          self.sorts = value
        end
      else
        self.sorts = nil
      end

      if attributes.key?(:'included_navigations')
        if (value = attributes[:'included_navigations']).is_a?(Array)
          self.included_navigations = value
        end
      end

      if attributes.key?(:'excluded_navigations')
        if (value = attributes[:'excluded_navigations']).is_a?(Array)
          self.excluded_navigations = value
        end
      end

      if attributes.key?(:'dynamic_facet')
        self.dynamic_facet = attributes[:'dynamic_facet']
      end

      if attributes.key?(:'variant_rollup_keys')
        if (value = attributes[:'variant_rollup_keys']).is_a?(Array)
          self.variant_rollup_keys = value
        end
      end

      if attributes.key?(:'pre_filter')
        self.pre_filter = attributes[:'pre_filter']
      end

      if attributes.key?(:'site')
        self.site = attributes[:'site']
      end

      if attributes.key?(:'response_mask')
        if (value = attributes[:'response_mask']).is_a?(Array)
          self.response_mask = value
        end
      end

      if attributes.key?(:'page_categories')
        if (value = attributes[:'page_categories']).is_a?(Array)
          self.page_categories = value
        end
      end

      if attributes.key?(:'spell_correction_mode')
        self.spell_correction_mode = attributes[:'spell_correction_mode']
      end

      if attributes.key?(:'include_expanded_results')
        self.include_expanded_results = attributes[:'include_expanded_results']
      end

      if attributes.key?(:'pin_unexpanded_results')
        self.pin_unexpanded_results = attributes[:'pin_unexpanded_results']
      end

      if attributes.key?(:'debug')
        self.debug = attributes[:'debug']
      end

      if attributes.key?(:'facet_limit')
        self.facet_limit = attributes[:'facet_limit']
      end

      if attributes.key?(:'login_id')
        self.login_id = attributes[:'login_id']
      end

      if attributes.key?(:'overwrites')
        self.overwrites = attributes[:'overwrites']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @refinements.nil?
        invalid_properties.push('invalid value for "refinements", refinements cannot be nil.')
      end

      if !@page_size.nil? && @page_size < 0
        invalid_properties.push('invalid value for "page_size", must be greater than or equal to 0.')
      end

      if !@skip.nil? && @skip < 0
        invalid_properties.push('invalid value for "skip", must be greater than or equal to 0.')
      end

      if @custom_url_params.nil?
        invalid_properties.push('invalid value for "custom_url_params", custom_url_params cannot be nil.')
      end

      if @sorts.nil?
        invalid_properties.push('invalid value for "sorts", sorts cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @refinements.nil?
      return false if !@page_size.nil? && @page_size < 0
      return false if !@skip.nil? && @skip < 0
      return false if @custom_url_params.nil?
      return false if @sorts.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] page_size Value to be assigned
    def page_size=(page_size)
      if !page_size.nil? && page_size < 0
        fail ArgumentError, 'invalid value for "page_size", must be greater than or equal to 0.'
      end

      @page_size = page_size
    end

    # Custom attribute writer method with validation
    # @param [Object] skip Value to be assigned
    def skip=(skip)
      if !skip.nil? && skip < 0
        fail ArgumentError, 'invalid value for "skip", must be greater than or equal to 0.'
      end

      @skip = skip
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          query == o.query &&
          area == o.area &&
          collection == o.collection &&
          visitor_id == o.visitor_id &&
          refinements == o.refinements &&
          page_size == o.page_size &&
          skip == o.skip &&
          biasing_profile == o.biasing_profile &&
          biasing == o.biasing &&
          custom_url_params == o.custom_url_params &&
          sorts == o.sorts &&
          included_navigations == o.included_navigations &&
          excluded_navigations == o.excluded_navigations &&
          dynamic_facet == o.dynamic_facet &&
          variant_rollup_keys == o.variant_rollup_keys &&
          pre_filter == o.pre_filter &&
          site == o.site &&
          response_mask == o.response_mask &&
          page_categories == o.page_categories &&
          spell_correction_mode == o.spell_correction_mode &&
          include_expanded_results == o.include_expanded_results &&
          pin_unexpanded_results == o.pin_unexpanded_results &&
          debug == o.debug &&
          facet_limit == o.facet_limit &&
          login_id == o.login_id &&
          overwrites == o.overwrites
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [query, area, collection, visitor_id, refinements, page_size, skip, biasing_profile, biasing, custom_url_params, sorts, included_navigations, excluded_navigations, dynamic_facet, variant_rollup_keys, pre_filter, site, response_mask, page_categories, spell_correction_mode, include_expanded_results, pin_unexpanded_results, debug, facet_limit, login_id, overwrites].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = GbRetailapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
